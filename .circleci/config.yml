version: 2
jobs:
  build:
    working_directory: /app
    docker:
      - image: docker:17.06.0-ce-git
    steps:
      - checkout
      - setup_remote_docker:
          version: 17.06.0-ce
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache jq
      - restore_cache:
          keys:
            - v1-{{ .Branch }}
          paths:
            - /caches/app.tar
      - run:
          name: Load Docker image layer cache
          command: |
            set +o pipefail
            docker load -i /caches/app.tar | true
      - run:
          name: Build application Docker image
          command: |
            docker version
            cd 2.5
            docker build --cache-from=app -t app .
      - run:
          name: Get Docker image size
          command: |
            mkdir /tmp/artifacts;
            docker images --format "{{.Size}}" app > /tmp/artifacts/size;
      - store_artifacts:
          path: /tmp/artifacts
      - run:
          name: Save Docker image layer cache
          command: |
            mkdir -p /caches
            docker save -o /caches/app.tar app
      - save_cache:
          key: v1-{{ .Branch }}-{{ epoch }}
          paths:
            - /caches/app.tar
      - run:
          name: Run tests
          command: |
            set -x
            docker create -v /usr/local/share/bro/site -v /pcap --name stuff alpine:3.6 /bin/true
            docker cp scripts/local.bro stuff:/usr/local/share/bro/site
            docker cp pcap/heartbleed.pcap stuff:/pcap
            docker run --rm app --version
            docker run --name bro --volumes-from stuff app -r heartbleed.pcap local "Site::local_nets += { 192.168.11.0/24 }"
      - run:
          name: Review results
          command: |
            docker cp bro:/pcap/notice.log  pcap/notice.log
            ls -lah pcap
            cat pcap/notice.log | awk '{ print $11 }' | tail -n4
      # - deploy:
      #     name: Push application Docker image
      #     command: |
      #       if [ "${CIRCLE_BRANCH}" == "master" ]; then
      #         login="$(aws ecr get-login)"
      #         ${login}
      #         docker tag app "${ECR_ENDPOINT}/app:${CIRCLE_SHA1}"
      #         docker push "${ECR_ENDPOINT}/app:${CIRCLE_SHA1}"
      #       fi
