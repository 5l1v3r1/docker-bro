input {
    redis {
        host => "redis
        data_type => "pattern_channel"
        key => "bro_redis*"
        codec => "json"
    }
}

filter {
    metrics {
        meter => "events"
        add_tag => "metric"
    }

    ###APP STATS TYPE###
    if [type] == "app_stats" {
        csv {
            separator => "  "
            quote_char => "ϖ"
            columns => ["ts", "ts_delta", "app", "uniq_hosts", "hits", "bytes"]
            remove_field => ["message", "@version"]
        }
    }

    ###COMMUNICATION TYPE###
    else if [type] == "comm" {
        csv {
            separator => "  "
            quote_char => "ϖ"
            columns => ["ts", "peer", "src_name", "connected_peer_desc", "connected_peer_addr", "connected_peer_port", "level", "feedback"]
            remove_field => ["message", "@version"]
        }
    }

    ###CONNECTION TYPE###
    # else if [type] == "conn" {
    #     csv {
    #         separator => "    "
    #         quote_char => "ϖ"
    #         columns => ["ts", "uid", "orig_IP", "orig_port", "resp_IP", "resp_port", "protocol", "service", "duration", "orig_bytes", "resp_bytes", "conn_state", "local_orig", "local_resp", "missed_bytes", "history", "orig_pkts", "orig_ip_bytes", "resp_pkts", "resp_ip_bytes", "tunnel_parents"]
    #         remove_field => ["message", "@version"]
    #     }
    # }

    ###DHCP TYPE###
    else if [type] == "dhcp" {
        csv {
            separator => "  "
            quote_char => "ϖ"
            columns => ["ts", "uid", "orig_IP", "orig_port", "resp_IP", "resp_port", "mac", "assigned_ip", "lease_time", "trans_id"]
            remove_field => ["message", "@version"]
        }
    }

    ###DNS TYPE###
    else if [type] == "dns" {
        csv {
            separator => "  "
            quote_char => "ϖ"
            columns => ["ts", "uid", "orig_IP", "orig_port", "resp_IP", "resp_port", "protocol", "trans_id", "query", "qclass", "qclass_name", "qtype", "qtype_name", "rcode", "rcode_name", "AA", "TC", "RD", "RA", "Z", "answers", "TTLs", "rejected"]
            remove_field => ["message", "@version"]
        }
    }

    ###DPD TYPE###
    else if [type] == "dpd" {
        csv {
            separator => "  "
            quote_char => "ϖ"
            columns => ["ts", "uid", "orig_IP", "orig_port", "resp_IP", "resp_port", "protocol", "analyzer", "failure_reason"]
            remove_field => ["message", "@version"]
        }
    }

    ###FILES TYPE###
    else if [type] == "files" {
        csv {
            separator => "  "
            quote_char => "ϖ"
            columns => ["ts", "fuid", "tx_hosts", "rx_hosts", "conn_uids", "source", "depth", "analyzers", "mime_type", "filename", "duration", "local_orig", "is_orig", "seen_bytes", "total_bytes", "missing_bytes", "overflow_bytes", "timedout", "parent_fuid", "md5", "sha1", "sha256", "extracted"]
            remove_field => ["message", "@version"]
        }
    }

    ###FTP TYPE###
    else if [type] == "ftp" {
        csv {
            separator => "  "
            quote_char => "ϖ"
            columns => ["ts", "uid", "orig_IP", "orig_port", "resp_IP", "resp_port", "user", "password", "command", "argmime_type", "file_size", "reply_code", "reply_msg", "data_channel_passive", "data_channel_orig_IP", "data_channel_resp_IP", "data_channel_resp_port", "fuid"]
            remove_field => ["message", "@version"]
        }
    }

    ###HTTP TYPE###
    else if [type] == "http" {
        csv {
            separator => "  "
            quote_char => "ϖ"
            columns => ["ts", "uid", "orig_IP", "orig_port", "resp_IP", "resp_port", "trans_depth", "method", "host", "uri", "referrer", "user_agent", "request_body_len", "response_body_len", "status_code", "status_msg", "info_code", "info_msg", "filename", "tags", "username", "password", "proxied", "orig_fuids", "orig_mime_types", "resp_fuids", "resp_mime_types"]
            remove_field => ["message", "@version"]
        }
    }

    ###INTEL TYPE###
    else if [type] == "intel" {
        csv {
            separator => "  "
            quote_char => "ϖ"
            columns => ["ts", "uid", "orig_IP", "orig_port", "resp_IP", "resp_port", "fuid", "file_mime_type", "file_desc", "seen_indicator", "seen_indicator_type", "seen_where", "seen_node", "sources"]
            remove_field => ["message", "@version"]
        }

    ###IRC TYPE###
    else if [type] == "irc" {
        csv {
            separator => "  "
            quote_char => "ϖ"
            columns => ["ts", "uid", "orig_IP", "orig_port", "resp_IP", "resp_port", "nick", "user", "command", "value", "addl", "dcc_file_name", "dcc_file_size", "dcc_mime_type", "fuid"]
            remove_field => ["message", "@version"]
        }
    }

    ###KERBEROS TYPE###
    else if [type] == "kerberos" {
        csv {
            separator => "  "
            quote_char => "ϖ"
            columns => ["ts", "uid", "orig_IP", "orig_port", "resp_IP", "resp_port", "request_type", "client", "service", "success", "error_msg", "from", "till", "cipher", "forwardable", "renewable", "client_cert_subject", "client_cert_fuid", "server_cert_subject", "server_cert_fuid"]
            remove_field => ["message", "@version"]
        }
    }

    ###KNOWN CERTS TYPE###
    else if [type] == "known_certs" {
        csv {
            separator => "  "
            quote_char => "ϖ"
            columns => ["ts", "host", "port_num", "subject", "issuer_subject", "serial"]
            remove_field => ["message", "@version"]
        }
    }

    ###KNOWN HOSTS TYPE###
    else if [type] == "known_hosts" {
        csv {
            separator => "  "
            quote_char => "ϖ"
            columns => ["ts", "host"]
            remove_field => ["message", "@version"]
        }
    }

    ###KNOWN SERVICES TYPE###
    else if [type] == "known_services" {
        csv {
            separator => "  "
            quote_char => "ϖ"
            columns => ["ts", "host", "port_num", "port_proto", "service"]
            remove_field => ["message", "@version"]
        }
    }

    ###MYSQL TYPE###
    else if [type] == "mysql" {
        csv {
            separator => "  "
            quote_char => "ϖ"
            columns => ["ts", "uid", "orig_IP", "orig_port", "resp_IP", "resp_port", "cmd", "arg", "success", "rows", "response"]
            remove_field => ["message", "@version"]
        }
    }

    ###NOTICE TYPE###
    else if [type] == "notice" {
        csv {
            separator => "  "
            quote_char => "ϖ"
            columns => ["ts", "uid", "orig_IP", "orig_port", "resp_IP", "resp_port", "fuid", "file_mime_type", "file_desc", "proto", "note", "msg", "sub", "src", "dst", "p", "npeer_descr", "actions", "suppress_for", "dropped", "remote_location_country_code", "remote_location_region", "remote_location_city", "remote_location_latitude", "remote_location_longitude"]
            remove_field => ["message", "@version", "remote_location_country_code", "remote_location_region", "remote_location_city", "remote_location_latitude", "remote_location_longitude"]
        }
    }

    ###PE TYPE###
    else if [type] == "pe" {
        csv {
            separator => "  "
            quote_char => "ϖ"
            columns => ["ts", "id", "machine", "compile_ts", "os", "subsystem", "is_exe", "is_64bit", "uses_aslr", "uses_dep", "uses_code_integrity", "uses_seh", "has_import_table", "has_export_table", "has_cert_table", "has_debug_data", "section_names"]
            remove_field => ["message", "@version"]
        }
    }

    ###RADIUS TYPE###
    else if [type] == "radius" {
        csv {
            separator => "  "
            quote_char => "ϖ"
            columns => ["ts", "uid", "orig_IP", "orig_port", "resp_IP", "resp_port", "username", "mac", "remote_ip", "connect_info", "result"]
            remove_field => ["message", "@version"]
        }
    }

    ###RDP TYPE###
    else if [type] == "rdp" {
        csv {
            separator => "  "
            quote_char => "ϖ"
            columns => ["ts", "uid", "orig_IP", "orig_port", "resp_IP", "resp_port", "cookie", "result", "security_protocol", "keyboard_layout", "client_build", "client_name", "client_dig_product_id", "desktop_width", "desktop_height", "requested_color_depth", "cert_type", "cert_count", "cert_permanent", "encryption_level", "encryption_method"]
            remove_field => ["message", "@version"]
        }
    }

    ###REPORTER TYPE###
    else if [type] == "reporter" {
        csv {
            separator => "  "
            quote_char => "ϖ"
            columns => ["ts", "level", "report", "location"]
            remove_field => ["message", "@version"]
        }
    }

    ###SIP TYPE###
    else if [type] == "sip" {
        csv {
            separator => "  "
            quote_char => "ϖ"
            columns => ["ts", "uid", "orig_IP", "orig_port", "resp_IP", "resp_port", "trans_depth", "method", "uri", "date", "request_from", "request_to", "response_from", "response_to", "reply_to", "call_id", "seq", "subject", "request_path", "response_path", "user_agent", "status_code", "status_msg", "warning", "request_body_len", "response_body_len", "content_type"]
            remove_field => ["message", "@version"]
        }
    }

    ###SMTP TYPE###
    else if [type] == "smtp" {
        csv {
            separator => "  "
            quote_char => "ϖ"
            columns => ["ts", "uid", "orig_IP", "orig_port", "resp_IP", "resp_port", "trans_depth", "helo", "mailfrom", "rcptto", "date", "from", "to", "reply_to", "msg_id", "in_reply_to", "subject", "x_originating_ip   first_received", "second_received", "last_reply", "path", "user_agent", "tls", "fuids", "is_webmail"]
            remove_field => ["message", "@version"]
        }
    }

    ###SNMP TYPE###
    else if [type] == "snmp" {
        csv {
            separator => "  "
            quote_char => "ϖ"
            columns => ["ts", "uid", "orig_IP", "orig_port", "resp_IP", "resp_port", "duration", "version", "community", "get_requests", "get_bulk_requests", "get_responses", "set_requests", "display_string", "up_since"]
            remove_field => ["message", "@version"]
        }
    }

    ###SOFTWARE TYPE###
    else if [type] == "software" {
        csv {
            separator => "  "
            quote_char => "ϖ"
            columns => ["ts", "host", "host_p", "software_type", "name", "version_major", "version_minor", "version_minor2", "version_minor3", "version_addl", "unparsed_version"]
            remove_field => ["message", "@version"]
        }
    }

    ###SSH TYPE###
    else if [type] == "ssh" {
        csv {
            separator => "  "
            quote_char => "ϖ"
            columns => ["ts", "uid", "orig_IP", "orig_port", "resp_IP", "resp_port", "version", "auth_success", "direction", "client", "server", "cipher_alg", "mac_alg", "compression_alg", "kex_alg", "host_key_alg", "host_key", "remote_location_country_code", "remote_location_region", "remote_location_city", "remote_location_latitude", "remote_location_longitude"]
            remove_field => ["message", "@version", "remote_location_country_code", "remote_location_region", "remote_location_city", "remote_location_latitude", "remote_location_longitude"]
        }
    }

    ###SSL TYPE###
    else if [type] == "ssl" {
        csv {
            separator => "  "
            quote_char => "ϖ"
            columns => ["ts", "uid", "orig_IP", "orig_port", "resp_IP", "resp_port", "version", "cipher", "curve", "server_name", "resumed", "last_alert", "next_protocol", "establishedcert_chain_fuids", "client_cert_chain_fuids", "subject", "issuer", "client_subject", "client_issuer", "validation_status"]
            remove_field => ["message", "@version"]
        }

    }

    ###SYSLOG TYPE###


    else if [type] == "syslog" {

        csv {
            separator => "  "
            quote_char => "ϖ"
            columns => ["ts", "uid", "orig_IP", "orig_port", "resp_IP", "resp_port", "proto", "facility", "severity", "report"]
            remove_field => ["message", "@version"]
        }

    }

    ###TRACE ROUTE TYPE###
    else if [type] == "traceroute" {

        csv {
            separator => "  "
            quote_char => "ϖ"
            columns => ["ts", "src", "dst", "proto"]
            remove_field => ["message", "@version"]
        }

    }

    ###TUNNEL TYPE###
    else if [type] == "tunnel" {

        csv {
            separator => "  "
            quote_char => "ϖ"
            columns => ["ts", "uid", "orig_IP", "orig_port", "resp_IP", "resp_port", "tunnel_type", "action"]
            remove_field => ["message", "@version"]
        }

    }

    ###WEIRD TYPE###
    else if [type] == "weird" {

        csv {
            separator => "  "
            quote_char => "ϖ"
            columns => ["ts", "uid", "orig_IP", "orig_port", "resp_IP", "resp_port", "name", "addl", "notice", "peer"]
            remove_field => ["message", "@version"]
        }


    }

    ###x509 TYPE###
    else if [type] == "x509" {
        csv {
            separator => "  "
            quote_char => "ϖ"
            columns => ["ts", "id", "certificate_version", "certificate_serial", "certificate_subject", "certificate_issuer", "certificate_not_valid_before", "certificate_not_valid_aftercertificate_key_alg", "certificate_sig_alg", "certificate_key_type", "certificate_key_length", "certificate_exponent", "certificate_curve", "san_dns", "san_uri", "san_email", "san_ip", "basic_constraints_ca", "basic_constraints_path_len"]
            remove_field => ["message", "@version"]
        }
    }

    if ([orig_IP] and[orig_IP] != "-") {
        geoip {
            source => "orig_IP"
            target => "geo_orig"
            fields => ["location", "country_name"]
        }
    }

    if ([resp_IP] and[resp_IP] != "-") {
        geoip {
            source => "resp_IP"
            target => "geo_resp"
            fields => ["location", "country_name"]
        }
    }

    date {
            match => ["ts", "UNIX"]
         }
}

output {
  if ("metric" in [tags]) {
      file {
          codec => line {
              format => "Events proccessed per second: %{[events][rate_1m]}"
          }
          path => "/storage/logstash/rate.log"
      }
  }
  else {
      elasticsearch {
          hosts => ["elasticsearch:9200"]
          index => "bro-%{+YYYY.MM.dd}"

      }
  }
}
